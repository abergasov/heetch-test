// Code generated by MockGen. DO NOT EDIT.
// Source: abstract.go

// Package locator is a generated GoMock package.
package locator

import (
	context "context"
	reflect "reflect"
	zombie "zombie_locator/internal/repository/zombie"

	gomock "github.com/golang/mock/gomock"
)

// MockLocator is a mock of Locator interface.
type MockLocator struct {
	ctrl     *gomock.Controller
	recorder *MockLocatorMockRecorder
}

// MockLocatorMockRecorder is the mock recorder for MockLocator.
type MockLocatorMockRecorder struct {
	mock *MockLocator
}

// NewMockLocator creates a new mock instance.
func NewMockLocator(ctrl *gomock.Controller) *MockLocator {
	mock := &MockLocator{ctrl: ctrl}
	mock.recorder = &MockLocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocator) EXPECT() *MockLocatorMockRecorder {
	return m.recorder
}

// Locate mocks base method.
func (m *MockLocator) Locate(ctx context.Context, lat, lon, limit float64) ([]zombie.Location, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locate", ctx, lat, lon, limit)
	ret0, _ := ret[0].([]zombie.Location)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Locate indicates an expected call of Locate.
func (mr *MockLocatorMockRecorder) Locate(ctx, lat, lon, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locate", reflect.TypeOf((*MockLocator)(nil).Locate), ctx, lat, lon, limit)
}
